{"version":3,"sources":["Components/RestaurantListComponent/RestaurantList.js","Components/Nav.jsx","Components/SortSelectComponent/SortSelect.js","App.js","serviceWorker.js","index.js"],"names":["RestaurantList","props","data","this","className","map","x","key","id","name","toUpperCase","rating","src","alt","address","street","city","state","href","contact","site","target","email","phone","React","Component","Nav","SortSelect","handleChange","bind","e","selectValue","value","console","log","onChange","App","orderBy","axios","get","then","setState","handleSortChange","sortAlphabetically","sortByRating","sort","a","b","nameA","nameB","ratingA","ratingB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.20324e0e.chunk.js","sourcesContent":["import React from 'react';\nimport './RestaurantList.css';\n\nexport default class RestaurantList extends React.Component {\n    constructor (props){\n        super(props);\n    }\n    render () {\n        const {data} = this.props;\n        //console.log(data);\n\n        // const divArray = data.map((res) => {\n        //    return ( \n        //         <div key={res.id}>\n        //             <h1>{res.name}</h1> \n        //         </div>\n        //     )\n        // });\n\n        return (\n            <div>\n                <div className=\"restaurantListDiv\">\n                    {data.map(x => \n                        <divÂ key={x.id} className =\"restaurantDiv\">\n                            <div className=\"nameRatingDiv\">\n                                <div className =\"nameDiv\"><h3>{x.name.toUpperCase()}</h3></div>\n                                <div className =\"ratingDiv\">\n                                    <p>Rating: {x.rating} / 5</p>\n                                </div>\n                            </div>\n                            <div className=\"imageAddressDiv\">\n                                <div className=\"imageDiv\">\n                                    <img \n                                    src = \"https://res.cloudinary.com/dipt6v4xr/image/upload/v1570469514/restaurant-chocolat.jpg\"\n                                    alt = \"Restaurant \"\n                                    />\n                                </div>\n                                <div className=\"addressDiv\">\n                                    <h4>Address:</h4>\n                                    <p>{x.address.street}</p>\n                                    <p>{x.address.city}</p>\n                                    <p>{x.address.state}</p>\n                                </div>\n                            </div>\n                            <div className=\"contactIdDiv\">\n                                <div className=\"contactDiv\">\n                                    <h4>Contact:</h4>\n                                    <p><a href={x.contact.site} target=\"_blank\">{x.contact.site}</a></p>\n                                    <p>{x.contact.email}</p>\n                                    <p>{x.contact.phone}</p>\n                                </div>\n                                {/* <div className=\"idDiv\">\n                                    <p>{x.id}</p>\n                                </div> */}\n                            </div>\n                        </div>\n                    )}\n                </div>\n            </div>\n        );\n    };\n}","import React from 'react';\nimport './Nav.css';\n\nexport default class Nav extends React.Component {\n    render () {\n        return (\n            <nav className=\"nav\">\n                <h1>MELP</h1>\n            </nav>\n        );\n    }\n}","import React from 'react';\nimport './SortSelect.css';\n\nexport default class SortSelect extends React.Component {\n    constructor (props) {\n        super(props);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    handleChange(e){\n        const selectValue = e.target.value;\n        console.log(selectValue);\n        this.props.onChange(selectValue);\n        \n    }\n    render () {\n        return (\n            <div className=\"sortSelect\">\n                <p>Order by: </p>\n                <select onChange={this.handleChange}>\n                    <option>ABC...</option>\n                    <option>Rating</option>\n                </select>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport axios from 'axios';\nimport RestaurantList from './Components/RestaurantListComponent/RestaurantList';\nimport Nav from './Components/Nav';\nimport SortSelect from './Components/SortSelectComponent/SortSelect'\nimport './App.css';\nimport ScrollUpButton from 'react-scroll-up-button';\n\n\nexport class App extends React.Component {\n  constructor (props) {\n    super(props); \n    this.state = {\n      data: [],\n      orderBy: 'ABC...'\n    }\n      axios.get('./data/data.json')\n      //fetch('https://recruiting-datasets.s3.us-east-2.amazonaws.com/data_melp.json')\n      //axios.get('https://recruiting-datasets.s3.us-east-2.amazonaws.com/data_melp.json', { method: 'GET', headers: {'Access-Control-Allow-Origin': '*','Content-Type': 'application/json', mode: 'no-cors'}})\n      .then(x => {\n      console.log(x.data);\n      this.setState ({data: x.data});\n      console.log(this.state);\n    });\n    this.handleSortChange = this.handleSortChange.bind(this)\n  }\n  handleSortChange(selectValue) {\n    console.log('Selected value: ' + selectValue);\n    this.setState({orderBy: selectValue})\n    console.log(this.state);\n    if(selectValue === 'ABC...') {\n      this.sortAlphabetically(this.state.data);\n    } else {\n      this.sortByRating(this.state.data);\n    }\n  }\n  sortAlphabetically(data)  {\n    return data.sort((a, b) => {\n        var nameA = a.name.toUpperCase();\n        var nameB = b.name.toUpperCase();\n        return (nameA < nameB) ? -1 : (nameA > nameB) ? 1 : 0;\n    });\n  }\n  sortByRating(data) {\n    return data.sort((a, b) => {\n        var ratingA = a.rating;\n        var ratingB = b.rating;\n        return (ratingA > ratingB) ? -1 : (ratingA < ratingB) ? 1 : 0;\n    });\n  }\n  render() {\n    const {data} = this.state\n    return (\n      <div className=\"App\">\n        <Nav/>\n        <SortSelect onChange={this.handleSortChange}/>\n        <RestaurantList data = {data}/>\n        <ScrollUpButton />\n      </div>\n    );\n  }\n\n  \n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}